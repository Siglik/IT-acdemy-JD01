Отчет.
Часть 1. Перегрузка (overloading) методов.

Создал следующие методы в классе тест:
	
	static void test(){
		System.out.println("void : void");
	}
	
	static void test(Object obj){
		System.out.println("void : Object");
	}
	
	public double test(int i, int j){
		System.out.print("double : int., nt");
		return (double)i/j;
	}
	
	protected void test(int i){
		System.out.println("void : int = " + i);
	}
	
	private static String test(long l){
		return "String : long = " + l;
	}

main:
		test();
		t.test(5);
		System.out.println("double : byte = " + t.test(4,2));
		System.out.println(test(5l));
		test(new int[1]);
		test("some string");

консоль:
	void : void
	void : int = 5
	double : int., ntdouble : byte = 2.0
	child - String : long = 5
	void : Object
	void : Object

Далее попытался определить методы:
1. изменив только модификаторы доступа на private, public, protected.
	Результат: Ошибка времени комиляции – Duplicate method.
2. изменив только тип возвращаемого значения
		Результат: Ошибка времени комиляции – Duplicate method.
3. убрав слово static.
		Результат: Ошибка времени комиляции – Duplicate method.
4.  изменив только имена принимаемых параметров *не типы)
		Результат: Ошибка времени комиляции – Duplicate method.
5. изменив все что в п.1-3 одновременно
		Результат: Ошибка времени комиляции – Duplicate method.


Вывод:

У переопределенных методов модификатор доступа,  тип возвращаемого значения, статичность могут быть различными.
При этом, при перегрузке методов можно определять только 1 метод  с уникальной сигнатурой, при этом в сигнатуру метода входят только имя метода, количество и типы принимаемых значений. Статичность, модификаторы доступа, тип возвращаемого значения и имена принимаемых параметров – в сигнатуру метода не входят. 

Далее дополнительно определил определил следующий метод:

	static void test(String str){
		System.out.println("void : String");
	}

main:
	...
	test(new int[1]);
	test("some string");

консоль:
	...
	void : Object
	void : String

Вывод: Как видим без метода test(String str), при вызове test("some string") вызывался test(Object obj). Но после определения test(String str), вызывается это метод. Можно сделать вывод, что если вызов подходит к нескольким методам - то компилятор выберет тот метод, чья сигнатура является более узкой, специализированной.

Проверим:
Определим 2 класса:
	static class A{}
	static class B extends A{}
И следующие методы:
	static void test(Object obj){
		System.out.println("void : Object");
	}
	static void test(A a){
		System.out.println("void : A");
	}
	static void test(B b){
		System.out.println("void : B");
	}
main:
		test(new A());
		test(new B());

консоль:
	void : A
	void : B

Далее:
1. удалим метод static void test(B b)
консоль:
	void : A
	void : A
2. удалим еще метод static void test(A a){
консоль:
	void : Object
	void : Object

Что подтверждает сделанные выше выводы.
