Часть 2. Переопределение (override) методов

Напишем родительский класс
public class Super {
	
	
	static void test(){
		System.out.println("void : void");
	}
	
	public double test(int i, int j){
		System.out.print("double : int., nt");
		return (double)i/j;
	}
	
	protected void test(int i){
		System.out.println("void : int = " + i);
	}
	
	private static String test(long l){
		return "String : long = " + l;
	}
}

Унаследуем от него дочерний:

public class Main extends Super{
	
	static class A{}
	static class B extends A{}
	public static void main(String[] args){
		Main t = new Main();
		
		test();
		t.test(5);
		System.out.println("double : byte = " + t.test(4,2));
		System.out.println(test(5l));
	}
}

Возникает ошибка при вызове: test(5l) - т.к. медод test(long l) приватный. Попытаемся его переопределить в классе Main:
	
	@Override
	private static String test(long l){
		return "String : long = " + l;
	}

Получаем ошибку, удаляем @Override - все ОК. Вывод переопределить приватный метод родительского класса нельзя, т.к. он изначальо скрыт, т.е. его не существует в дочернем классе. И мы просто определяем новый метод с такой же сигнатурой и именем, если необходимо.

Далее переопределим test()
Super:
	static void test(){
		System.out.println("void : void");
	}
Main:
	@Override
	static void test(){
		System.out.println("child - void : void");
	}

Ошибка - предлагает убрать @Override или static из обоих классов. Вывод статические медоды нельзя переопределить, только скрыть.

Проверим:
1. Уберем @Override
2. в методе main:
		Main t = new Main();
		Super spr = new Main();
		
		test();
		t.test();
		spr.test();
консоль:
	child - void : void
	child - void : void
	void : void		<--- ОБРАТИТЬ ВНИМАНИЕ ЧТО ПРИ ВЫЗОВЕ СТАТИЧЕСКОГО МЕТОДА ЧЕРЕЗ ССЫЛКУ БАЗОВОГО КЛАССА НА ОБЪЕКТ ПРОИЗВОДНОГО ВЫЗЫВАЕТСЯ СТАТИЧЕСКАЯ МЕТОД ИЗ БАЗОВОГО КЛАССА
3.  Вернем @Override уберем static
4. в методе main:
		Main t = new Main();
		Super spr = new Main();
		
//		test();
		t.test();
		spr.test()
консоль:
	child - void : void
	child - void : void		<--- ОБРАТИТЬ ВНИМАНИЕ ЧТО ПРИ ВЫЗОВЕ НЕСТАТИЧЕСКОГО МЕТОДА ЧЕРЕЗ ССЫЛКУ БАЗОВОГО КЛАССА НА ОБЪЕКТ ПРОИЗВОДНОГО ВЫЗЫВАЕТСЯ НЕСТАТИЧЕСКИЙ МЕТОД ИЗ ПРОИЗВОДНОГО КЛАССА

Со статическими разобрались, поиграемся с возврааемым значением и модификаторами доступа:
Начнем с возвращаемых значений:
Main:
	@Override
	int test(){
		System.out.println("child - void : void");
	}
Получаем ошибку : The return type is incompatible with Super.test()
проверим с другими возвращаемыми значениями int->short; long->int; String -> Object; Object -> String.
ЭВРИКА! Object -> String - сработало. Значит делая override мы всеже можем менять тип возвращаемого значения, при условии что тип в дочернем классе совместим с родительским! Т.е. Тип возвращаемым методом в родителльском классе является РОДИТЕЛЬСКИМ ТИПОМ (или интерфейсом) типу возвращаему переопределенным в дочернем классе методом.

Ну и модификаторы доступа:
При порытке в дочернем классе задать переоопределенному методу "более скрытый" модификатор (public->protected->(default)->private) возникает ошибка:
Description	Resource	Path	Location	Type
Cannot reduce the visibility of the inherited method from Super

Делаем вывод что модификаторы доступа можно переопределять только в сторону увеличкния видимости ((default)->protected->public).

ИТОГО КРАТКО:
  -модификаторы доступа можно переопределять только в сторону увеличкния видимости ((default)->public->protected).
  -делая override мы можем менять тип возвращаемого значения, при условии что тип в дочернем классе совместим с родительским!
  -статические медоды нельзя переопределить, только скрыть.
  -ПРИ ВЫЗОВЕ НЕСТАТИЧЕСКОГО МЕТОДА ЧЕРЕЗ ССЫЛКУ БАЗОВОГО КЛАССА НА ОБЪЕКТ ПРОИЗВОДНОГО ВЫЗЫВАЕТСЯ НЕСТАТИЧЕСКИЙ МЕТОД ИЗ ПРОИЗВОДНОГО КЛАССА
  -ПРИ ВЫЗОВЕ СТАТИЧЕСКОГО МЕТОДА ЧЕРЕЗ ССЫЛКУ БАЗОВОГО КЛАССА НА ОБЪЕКТ ПРОИЗВОДНОГО ВЫЗЫВАЕТСЯ СТАТИЧЕСКАЯ МЕТОД ИЗ БАЗОВОГО КЛАССА
  -переопределить приватный метод родительского класса нельзя, т.к. он изначальо скрыт, т.е. его не существует в дочернем классе. И мы просто определяем новый метод с такой же сигнатурой и именем, если необходимо.

