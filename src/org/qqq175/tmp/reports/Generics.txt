<T> - type parameters - параметр типа которым устанавливается тип Generic-а.
<?> wildcard bound - ограничение, накладываемое на type parameters в момент объявления
переменной(локальной, поля класса, параметр метода) нашего Generic класса.



Например:
class LinkedList<T> {
  //some code
}
  Здесь T - это параметр type parameter класса LinkedList, которым параметризуются
все generic поля, методы, переменные в классе.

Объявить переменную можно так:
LinkedList<List> lists = new LinkedList<List>();
При объявлении параметр T задается - List - Список объектов реализующих интерфейс List
(список списков)

Например напишем функцию которая печатает все вложенные списки.
public static void print(LinkedList<List> lists){
    for(List list : lists)
        Arrays.toString(list);
}

Но проблема в том что нельзя передать в данный метод коллекцию с type parameter ArrayList(который вроде бы extends List):
public static void main(String[] args) {
   LinkedList<List> lists = new LinkedList<List>();
   LinkedList<ArrayList> listsA = new LinkedList<ArrayList>();
   ArrayList<Integer> iArr = new ArrayList<>();
   iArr.add(8);
   iArr.add(18);
   lists.add(iArr);
   listsA.add(iArr);
   print(lists);
   // print(listsA); //- error  The method print(LinkedList<List>) in the type Generics is not applicable for the arguments (LinkedList<ArrayList>)	Generics.java	/Tests/src	line 15	Java Problem
}

Используем wildcard bound на параметр метода:
public static double зкште(LinkedList<? extends List> lists){
  //realization
}

Т.е. метод принимает тип LinkedList который параметризирован  List или наследником List.

Расскоментируем строку
  print(listsA);

  Работает!
